<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.2.6.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>com.backend.boilerplate</groupId>
  <artifactId>springboot-boilerplate</artifactId>
  <version>0.0.3</version>
  <name>springboot-boilerplate</name>
  <description>generic springboot-boilerplate</description>

  <properties>
    <java.version>11</java.version>
    <spring-cloud.version>Hoxton.SR3</spring-cloud.version>
    <aws.version>1.11.490</aws.version>
    <commons-collections.version>4.3</commons-collections.version>
    <flyway.version>6.0.8</flyway.version>
    <hikaricp.version>3.4.2</hikaricp.version>
    <postgresql.version>42.2.25</postgresql.version>
    <modelmapper.version>2.3.7</modelmapper.version>
    <spring.cloud.contract.version>2.1.2.RELEASE</spring.cloud.contract.version>
    <owasp.encoder.version>1.2.2</owasp.encoder.version>
    <commons-collections.version>4.3</commons-collections.version>
    <embedded-postgresql.version>1.5.0</embedded-postgresql.version>

    <javadoc.skip>true</javadoc.skip>
    <delombok.skip>true</delombok.skip>
    <animal-sniffer.skip>true</animal-sniffer.skip>
    <duplicate-finder.skip>true</duplicate-finder.skip>
    <jacoco.skip>true</jacoco.skip>
    <jacoco.exclude></jacoco.exclude>

    <!-- dependencies starts -->
    <common-util.version>0.0.3</common-util.version>
    <log4j2-masking-plugin.version>0.0.2</log4j2-masking-plugin.version>

    <api.version>3.0.0-M3</api.version>
    <maven.version>2.0.9</maven.version>

    <spring-boot-maven-plugin-classifier>exec</spring-boot-maven-plugin-classifier>
    <!-- Sonar Properties -->
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.sources>src/main/</sonar.sources>
    <sonar.tests>src/test</sonar.tests>
    <sonar.coverage.jacoco.xmlReportPaths>docs/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
    <sonar.projectKey>yxz-abc</sonar.projectKey>
    <sonar.organization>xyz</sonar.organization>
    <sonar.inclusions>**/com/backend/boilerplate/**</sonar.inclusions>
    <sonar.exclusions>
      **/pom.xml,**/com/backend/boilerplate/dto/**,**/com/backend/boilerplate/constant/**,**/com/backend/boilerplate/exception/**,**/com/backend/boilerplate/entity/**,**/com/backend/boilerplate/web/exception/**
    </sonar.exclusions>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.backend.boilerplate</groupId>
      <artifactId>spring-boilerplate-common-util</artifactId>
      <version>0.0.1</version>
    </dependency>
    <!--<dependency>
      <groupId>com.backend.boilerplate</groupId>
      <artifactId>springboot-boilerplate-security</artifactId>
      <version>0.0.1</version>
    </dependency>-->
    <dependency>
      <groupId>com.sp.common.util</groupId>
      <artifactId>common-util</artifactId>
      <version>${common-util.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sp.plugin.log4j</groupId>
      <artifactId>log4j2-converters-plugin</artifactId>
      <version>${log4j2-masking-plugin.version}</version>
    </dependency>

    <!-- excluding default logging framework in spring to support log4j2 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- dependencies for spring web -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- dependencies for configuration-processor -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version><!--$NO-MVN-MAN-VER$ -->
    </dependency>

    <!-- JSON PATCH -->
    <dependency>
      <groupId>com.github.java-json-tools</groupId>
      <artifactId>json-patch</artifactId>
      <version>1.13</version>
    </dependency>

    <!-- embedded postgress for testing -->
    <dependency>
      <groupId>io.zonky.test</groupId>
      <artifactId>embedded-database-spring-test</artifactId>
      <version>${embedded-postgresql.version}</version>
      <scope>test</scope>
    </dependency>


    <!-- dependencies for reactive -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>

    <!-- dependencies for cloud config - externalization of configurations -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>

    <!-- dependencies for hystrix - circuit breaker pattern -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
    </dependency>

    <!-- dependencies for actuator -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- dependencies for logging -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j2</artifactId>
    </dependency>
    <!-- for log4j2.yml, need jackson-databind and jackson-dataformat-yaml -->
    <!-- spring-boot-starter-web -> spring-boot-starter-json -> jackson-databind -->
    <!-- included by spring boot <dependency> <groupId>com.fasterxml.jackson.core</groupId> 
      <artifactId>jackson-databind</artifactId> </dependency> -->
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>${commons-collections.version}</version>
    </dependency>
    <dependency>
      <groupId>org.owasp.encoder</groupId>
      <artifactId>encoder</artifactId>
      <version>${owasp.encoder.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator -->
    <dependency>
      <groupId>com.fasterxml.uuid</groupId>
      <artifactId>java-uuid-generator</artifactId>
      <version>4.0.1</version>
    </dependency>

    <!-- lombok for java boilerplate code cleanup -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!--open API-->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-ui</artifactId>
      <version>1.3.2</version>
    </dependency>

    <!-- FLYWAY for database versioning -->
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>${flyway.version}</version><!--$NO-MVN-MAN-VER$ -->
    </dependency>

    <!-- dependencies for data -->
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>${hikaricp.version}</version><!--$NO-MVN-MAN-VER$ -->
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- moddelmapper for Dto to Entity conevrsion and vice-versa -->
    <dependency>
      <groupId>org.modelmapper</groupId>
      <artifactId>modelmapper</artifactId>
      <version>${modelmapper.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.json</groupId>
      <artifactId>javax.json-api</artifactId>
      <version>${javax-json.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.johnzon</groupId>
      <artifactId>johnzon-core</artifactId>
      <version>${johnzon.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-aws-parameter-store-config</artifactId>
    </dependency>

    <!-- dependencies for testing -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-runner</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-commons</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-migrationsupport</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.reflections</groupId>
      <artifactId>reflections</artifactId>
      <version>0.9.10</version>
      <scope>test</scope>
    </dependency>

    <!-- For Contract Testing -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-contract-stub-runner</artifactId>
      <version>${spring.cloud.contract.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.projectreactor</groupId>
      <artifactId>reactor-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- dependencies for LocalRunsSonarAnalysis -->
    <dependency>
      <groupId>org.apache.maven.enforcer</groupId>
      <artifactId>enforcer-api</artifactId>
      <version>${api.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <version>${maven.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <version>${maven.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <version>${maven.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <version>${maven.version}</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <version>1.0-alpha-9</version>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.5.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-bom</artifactId>
        <version>${aws.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <executable>true</executable>
        </configuration>
        <executions>
          <execution>
            <id>generate build info</id>
            <goals>
              <goal>build-info</goal>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <log4j.configurationFile>log4j2-test.yml</log4j.configurationFile>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.ec4j.maven</groupId>
        <artifactId>editorconfig-maven-plugin</artifactId>
        <version>0.0.10</version>
        <executions>
          <execution>
            <id>check</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <excludes>
            <!-- Note that maven submodule directories and many non-source 
              file patterns are excluded by default -->
            <!-- see https://github.com/ec4j/editorconfig-maven-plugin/blob/master/ec4j-lint-api/src/main/java/org/ec4j/maven/lint/api/Constants.java#L37 -->
            <!-- You can exclude further files from processing: -->
            <exclude>eclipse-java-code-style*.xml</exclude>
            <exclude>intellij-java-code-style*.xml</exclude>
            <exclude>docs/</exclude>
          </excludes>
          <!-- All files are included by default: <includes> <include>**</include> 
            </includes> -->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok-maven-plugin</artifactId>
        <version>1.18.6.0</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>delombok</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <addOutputDirectory>false</addOutputDirectory>
          <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
          <skip>${delombok.skip}</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <charset>UTF-8</charset>
          <docencoding>UTF-8</docencoding>
          <destDir>docs/javadocs</destDir>
          <sourcepath>${project.basedir}/target/generated-sources/delombok</sourcepath>
          <skip>${javadoc.skip}</skip>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <configuration>
          <skip>${animal-sniffer.skip}</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.basepom.maven</groupId>
        <artifactId>duplicate-finder-maven-plugin</artifactId>
        <configuration>
          <skip>${duplicate-finder.skip}</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.4</version>
        <configuration>
          <skip>${jacoco.skip}</skip>
          <includes>
            <include>com/backend/boilerplate/dao/impl/**</include>
            <include>com/backend/boilerplate/service/impl/**</include>
            <include>com/backend/boilerplate/util/**</include>
            <include>com/backend/boilerplate/web/controller/**</include>
          </includes>
          <excludes>
            <exclude>${jacoco.exclude}*</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <outputDirectory>docs/jacoco</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>CLASS</element>
                  <limits>
                    <limit>
                      <counter>METHOD</counter>
                      <value>MISSEDCOUNT</value>
                      <maximum>0</maximum>
                    </limit>
                  </limits>
                </rule>
                <rule>
                  <element>METHOD</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>.6</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.sp.maven</groupId>
        <artifactId>sp-maven-plugin</artifactId>
        <version>0.0.1</version>
        <executions>
          <execution>
            <phase>install</phase>
            <goals>
              <goal>baseline</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <executable>true</executable>
          <wait>1000</wait>
          <maxAttempts>1800</maxAttempts>
          <classifier>${spring-boot-maven-plugin-classifier}</classifier>
        </configuration>
        <executions>
          <execution>
            <id>generate build info</id>
            <goals>
              <goal>build-info</goal>
              <goal>repackage</goal>
            </goals>
          </execution>
          <execution>
            <id>pre-integration-test</id>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <mainClass>com.backend.boilerplate.BoilerplateServiceApplication</mainClass>
              <useTestClasspath>true</useTestClasspath>
              <folders>
                <folder>${project.build.testOutputDirectory}</folder>
              </folders>
              <environmentVariables>
                <aws.paramstore.enabled>false</aws.paramstore.enabled>
                <spring.flyway.enabled>false</spring.flyway.enabled>
                <server.port>${openapi-port}</server.port>
              </environmentVariables>
            </configuration>
          </execution>
          <execution>
            <id>post-integration-test</id>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>port-allocator-maven-plugin</artifactId>
        <version>1.2</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>allocate-ports</goal>
            </goals>
            <configuration>
              <ports>
                <port>
                  <name>openapi-port</name>
                </port>
              </ports>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-maven-plugin</artifactId>
        <version>0.3</version>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <apiDocsUrl>http://localhost:${openapi-port}/v3/api-docs</apiDocsUrl>
          <outputFileName>openapi.json</outputFileName>
          <outputDir>${project.basedir}/src/main/resources</outputDir>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.coderplus.maven.plugins</groupId>
        <artifactId>copy-rename-maven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>copy-file</id>
            <phase>install</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <sourceFile>target/${project.artifactId}-${project.version}-${spring-boot-maven-plugin-classifier}.jar
              </sourceFile>
              <destinationFile>../target/${project.artifactId}-${project.version}.jar</destinationFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>11</source>
          <target>11</target>
        </configuration>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>
